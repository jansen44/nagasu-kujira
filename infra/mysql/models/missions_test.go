// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMissions(t *testing.T) {
	t.Parallel()

	query := Missions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMissionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Missions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMissionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Missions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Missions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMissionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MissionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Missions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMissionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MissionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Mission exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MissionExists to return true, but got false.")
	}
}

func testMissionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	missionFound, err := FindMission(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if missionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMissionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Missions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMissionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Missions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMissionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	missionOne := &Mission{}
	missionTwo := &Mission{}
	if err = randomize.Struct(seed, missionOne, missionDBTypes, false, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}
	if err = randomize.Struct(seed, missionTwo, missionDBTypes, false, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = missionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = missionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Missions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMissionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	missionOne := &Mission{}
	missionTwo := &Mission{}
	if err = randomize.Struct(seed, missionOne, missionDBTypes, false, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}
	if err = randomize.Struct(seed, missionTwo, missionDBTypes, false, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = missionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = missionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Missions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func missionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Mission) error {
	*o = Mission{}
	return nil
}

func missionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Mission) error {
	*o = Mission{}
	return nil
}

func missionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Mission) error {
	*o = Mission{}
	return nil
}

func missionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Mission) error {
	*o = Mission{}
	return nil
}

func missionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Mission) error {
	*o = Mission{}
	return nil
}

func missionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Mission) error {
	*o = Mission{}
	return nil
}

func missionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Mission) error {
	*o = Mission{}
	return nil
}

func missionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Mission) error {
	*o = Mission{}
	return nil
}

func missionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Mission) error {
	*o = Mission{}
	return nil
}

func testMissionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Mission{}
	o := &Mission{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, missionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Mission object: %s", err)
	}

	AddMissionHook(boil.BeforeInsertHook, missionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	missionBeforeInsertHooks = []MissionHook{}

	AddMissionHook(boil.AfterInsertHook, missionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	missionAfterInsertHooks = []MissionHook{}

	AddMissionHook(boil.AfterSelectHook, missionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	missionAfterSelectHooks = []MissionHook{}

	AddMissionHook(boil.BeforeUpdateHook, missionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	missionBeforeUpdateHooks = []MissionHook{}

	AddMissionHook(boil.AfterUpdateHook, missionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	missionAfterUpdateHooks = []MissionHook{}

	AddMissionHook(boil.BeforeDeleteHook, missionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	missionBeforeDeleteHooks = []MissionHook{}

	AddMissionHook(boil.AfterDeleteHook, missionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	missionAfterDeleteHooks = []MissionHook{}

	AddMissionHook(boil.BeforeUpsertHook, missionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	missionBeforeUpsertHooks = []MissionHook{}

	AddMissionHook(boil.AfterUpsertHook, missionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	missionAfterUpsertHooks = []MissionHook{}
}

func testMissionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Missions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMissionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(missionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Missions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMissionToManyTaskStatuses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Mission
	var b, c TaskStatus

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, taskStatusDBTypes, false, taskStatusColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, taskStatusDBTypes, false, taskStatusColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MissionID = a.ID
	c.MissionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TaskStatuses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MissionID == b.MissionID {
			bFound = true
		}
		if v.MissionID == c.MissionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MissionSlice{&a}
	if err = a.L.LoadTaskStatuses(ctx, tx, false, (*[]*Mission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TaskStatuses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TaskStatuses = nil
	if err = a.L.LoadTaskStatuses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TaskStatuses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMissionToManyTasks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Mission
	var b, c Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MissionID = a.ID
	c.MissionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Tasks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MissionID == b.MissionID {
			bFound = true
		}
		if v.MissionID == c.MissionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MissionSlice{&a}
	if err = a.L.LoadTasks(ctx, tx, false, (*[]*Mission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Tasks = nil
	if err = a.L.LoadTasks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMissionToManyAddOpTaskStatuses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Mission
	var b, c, d, e TaskStatus

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, missionDBTypes, false, strmangle.SetComplement(missionPrimaryKeyColumns, missionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TaskStatus{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, taskStatusDBTypes, false, strmangle.SetComplement(taskStatusPrimaryKeyColumns, taskStatusColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TaskStatus{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTaskStatuses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MissionID {
			t.Error("foreign key was wrong value", a.ID, first.MissionID)
		}
		if a.ID != second.MissionID {
			t.Error("foreign key was wrong value", a.ID, second.MissionID)
		}

		if first.R.Mission != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Mission != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TaskStatuses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TaskStatuses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TaskStatuses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMissionToManyAddOpTasks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Mission
	var b, c, d, e Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, missionDBTypes, false, strmangle.SetComplement(missionPrimaryKeyColumns, missionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Task{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Task{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTasks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MissionID {
			t.Error("foreign key was wrong value", a.ID, first.MissionID)
		}
		if a.ID != second.MissionID {
			t.Error("foreign key was wrong value", a.ID, second.MissionID)
		}

		if first.R.Mission != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Mission != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Tasks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Tasks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Tasks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMissionToOneProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Mission
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, missionDBTypes, false, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectsID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MissionSlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*Mission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMissionToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Mission
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, missionDBTypes, false, strmangle.SetComplement(missionPrimaryKeyColumns, missionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Missions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectsID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectsID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectsID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectsID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectsID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectsID, x.ID)
		}
	}
}

func testMissionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMissionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MissionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMissionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Missions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	missionDBTypes = map[string]string{`ID`: `int`, `ProjectsID`: `int`, `Name`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_              = bytes.MinRead
)

func testMissionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(missionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(missionAllColumns) == len(missionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Missions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, missionDBTypes, true, missionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMissionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(missionAllColumns) == len(missionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Mission{}
	if err = randomize.Struct(seed, o, missionDBTypes, true, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Missions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, missionDBTypes, true, missionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(missionAllColumns, missionPrimaryKeyColumns) {
		fields = missionAllColumns
	} else {
		fields = strmangle.SetComplement(
			missionAllColumns,
			missionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MissionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMissionsUpsert(t *testing.T) {
	t.Parallel()

	if len(missionAllColumns) == len(missionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMissionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Mission{}
	if err = randomize.Struct(seed, &o, missionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Mission: %s", err)
	}

	count, err := Missions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, missionDBTypes, false, missionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Mission: %s", err)
	}

	count, err = Missions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
