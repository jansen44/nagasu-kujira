// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Missions", testMissions)
	t.Run("Projects", testProjects)
	t.Run("TaskStatuses", testTaskStatuses)
	t.Run("Tasks", testTasks)
}

func TestDelete(t *testing.T) {
	t.Run("Missions", testMissionsDelete)
	t.Run("Projects", testProjectsDelete)
	t.Run("TaskStatuses", testTaskStatusesDelete)
	t.Run("Tasks", testTasksDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Missions", testMissionsQueryDeleteAll)
	t.Run("Projects", testProjectsQueryDeleteAll)
	t.Run("TaskStatuses", testTaskStatusesQueryDeleteAll)
	t.Run("Tasks", testTasksQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Missions", testMissionsSliceDeleteAll)
	t.Run("Projects", testProjectsSliceDeleteAll)
	t.Run("TaskStatuses", testTaskStatusesSliceDeleteAll)
	t.Run("Tasks", testTasksSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Missions", testMissionsExists)
	t.Run("Projects", testProjectsExists)
	t.Run("TaskStatuses", testTaskStatusesExists)
	t.Run("Tasks", testTasksExists)
}

func TestFind(t *testing.T) {
	t.Run("Missions", testMissionsFind)
	t.Run("Projects", testProjectsFind)
	t.Run("TaskStatuses", testTaskStatusesFind)
	t.Run("Tasks", testTasksFind)
}

func TestBind(t *testing.T) {
	t.Run("Missions", testMissionsBind)
	t.Run("Projects", testProjectsBind)
	t.Run("TaskStatuses", testTaskStatusesBind)
	t.Run("Tasks", testTasksBind)
}

func TestOne(t *testing.T) {
	t.Run("Missions", testMissionsOne)
	t.Run("Projects", testProjectsOne)
	t.Run("TaskStatuses", testTaskStatusesOne)
	t.Run("Tasks", testTasksOne)
}

func TestAll(t *testing.T) {
	t.Run("Missions", testMissionsAll)
	t.Run("Projects", testProjectsAll)
	t.Run("TaskStatuses", testTaskStatusesAll)
	t.Run("Tasks", testTasksAll)
}

func TestCount(t *testing.T) {
	t.Run("Missions", testMissionsCount)
	t.Run("Projects", testProjectsCount)
	t.Run("TaskStatuses", testTaskStatusesCount)
	t.Run("Tasks", testTasksCount)
}

func TestHooks(t *testing.T) {
	t.Run("Missions", testMissionsHooks)
	t.Run("Projects", testProjectsHooks)
	t.Run("TaskStatuses", testTaskStatusesHooks)
	t.Run("Tasks", testTasksHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Missions", testMissionsInsert)
	t.Run("Missions", testMissionsInsertWhitelist)
	t.Run("Projects", testProjectsInsert)
	t.Run("Projects", testProjectsInsertWhitelist)
	t.Run("TaskStatuses", testTaskStatusesInsert)
	t.Run("TaskStatuses", testTaskStatusesInsertWhitelist)
	t.Run("Tasks", testTasksInsert)
	t.Run("Tasks", testTasksInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("MissionToProjectUsingProject", testMissionToOneProjectUsingProject)
	t.Run("TaskStatusToMissionUsingMission", testTaskStatusToOneMissionUsingMission)
	t.Run("TaskToMissionUsingMission", testTaskToOneMissionUsingMission)
	t.Run("TaskToTaskStatusUsingCurrentStatusTaskStatus", testTaskToOneTaskStatusUsingCurrentStatusTaskStatus)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("MissionToTaskStatuses", testMissionToManyTaskStatuses)
	t.Run("MissionToTasks", testMissionToManyTasks)
	t.Run("ProjectToMissions", testProjectToManyMissions)
	t.Run("TaskStatusToCurrentStatusTasks", testTaskStatusToManyCurrentStatusTasks)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("MissionToProjectUsingMissions", testMissionToOneSetOpProjectUsingProject)
	t.Run("TaskStatusToMissionUsingTaskStatuses", testTaskStatusToOneSetOpMissionUsingMission)
	t.Run("TaskToMissionUsingTasks", testTaskToOneSetOpMissionUsingMission)
	t.Run("TaskToTaskStatusUsingCurrentStatusTasks", testTaskToOneSetOpTaskStatusUsingCurrentStatusTaskStatus)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("MissionToTaskStatuses", testMissionToManyAddOpTaskStatuses)
	t.Run("MissionToTasks", testMissionToManyAddOpTasks)
	t.Run("ProjectToMissions", testProjectToManyAddOpMissions)
	t.Run("TaskStatusToCurrentStatusTasks", testTaskStatusToManyAddOpCurrentStatusTasks)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Missions", testMissionsReload)
	t.Run("Projects", testProjectsReload)
	t.Run("TaskStatuses", testTaskStatusesReload)
	t.Run("Tasks", testTasksReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Missions", testMissionsReloadAll)
	t.Run("Projects", testProjectsReloadAll)
	t.Run("TaskStatuses", testTaskStatusesReloadAll)
	t.Run("Tasks", testTasksReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Missions", testMissionsSelect)
	t.Run("Projects", testProjectsSelect)
	t.Run("TaskStatuses", testTaskStatusesSelect)
	t.Run("Tasks", testTasksSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Missions", testMissionsUpdate)
	t.Run("Projects", testProjectsUpdate)
	t.Run("TaskStatuses", testTaskStatusesUpdate)
	t.Run("Tasks", testTasksUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Missions", testMissionsSliceUpdateAll)
	t.Run("Projects", testProjectsSliceUpdateAll)
	t.Run("TaskStatuses", testTaskStatusesSliceUpdateAll)
	t.Run("Tasks", testTasksSliceUpdateAll)
}
