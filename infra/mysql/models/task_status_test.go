// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTaskStatuses(t *testing.T) {
	t.Parallel()

	query := TaskStatuses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTaskStatusesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaskStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaskStatusesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TaskStatuses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaskStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaskStatusesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TaskStatusSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaskStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaskStatusesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TaskStatusExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TaskStatus exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TaskStatusExists to return true, but got false.")
	}
}

func testTaskStatusesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	taskStatusFound, err := FindTaskStatus(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if taskStatusFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTaskStatusesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TaskStatuses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTaskStatusesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TaskStatuses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTaskStatusesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taskStatusOne := &TaskStatus{}
	taskStatusTwo := &TaskStatus{}
	if err = randomize.Struct(seed, taskStatusOne, taskStatusDBTypes, false, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, taskStatusTwo, taskStatusDBTypes, false, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = taskStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = taskStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TaskStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTaskStatusesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	taskStatusOne := &TaskStatus{}
	taskStatusTwo := &TaskStatus{}
	if err = randomize.Struct(seed, taskStatusOne, taskStatusDBTypes, false, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, taskStatusTwo, taskStatusDBTypes, false, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = taskStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = taskStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func taskStatusBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TaskStatus) error {
	*o = TaskStatus{}
	return nil
}

func taskStatusAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TaskStatus) error {
	*o = TaskStatus{}
	return nil
}

func taskStatusAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TaskStatus) error {
	*o = TaskStatus{}
	return nil
}

func taskStatusBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TaskStatus) error {
	*o = TaskStatus{}
	return nil
}

func taskStatusAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TaskStatus) error {
	*o = TaskStatus{}
	return nil
}

func taskStatusBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TaskStatus) error {
	*o = TaskStatus{}
	return nil
}

func taskStatusAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TaskStatus) error {
	*o = TaskStatus{}
	return nil
}

func taskStatusBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TaskStatus) error {
	*o = TaskStatus{}
	return nil
}

func taskStatusAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TaskStatus) error {
	*o = TaskStatus{}
	return nil
}

func testTaskStatusesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TaskStatus{}
	o := &TaskStatus{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, taskStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TaskStatus object: %s", err)
	}

	AddTaskStatusHook(boil.BeforeInsertHook, taskStatusBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	taskStatusBeforeInsertHooks = []TaskStatusHook{}

	AddTaskStatusHook(boil.AfterInsertHook, taskStatusAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	taskStatusAfterInsertHooks = []TaskStatusHook{}

	AddTaskStatusHook(boil.AfterSelectHook, taskStatusAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	taskStatusAfterSelectHooks = []TaskStatusHook{}

	AddTaskStatusHook(boil.BeforeUpdateHook, taskStatusBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	taskStatusBeforeUpdateHooks = []TaskStatusHook{}

	AddTaskStatusHook(boil.AfterUpdateHook, taskStatusAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	taskStatusAfterUpdateHooks = []TaskStatusHook{}

	AddTaskStatusHook(boil.BeforeDeleteHook, taskStatusBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	taskStatusBeforeDeleteHooks = []TaskStatusHook{}

	AddTaskStatusHook(boil.AfterDeleteHook, taskStatusAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	taskStatusAfterDeleteHooks = []TaskStatusHook{}

	AddTaskStatusHook(boil.BeforeUpsertHook, taskStatusBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	taskStatusBeforeUpsertHooks = []TaskStatusHook{}

	AddTaskStatusHook(boil.AfterUpsertHook, taskStatusAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	taskStatusAfterUpsertHooks = []TaskStatusHook{}
}

func testTaskStatusesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaskStatusesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(taskStatusColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TaskStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaskStatusToManyCurrentStatusTasks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TaskStatus
	var b, c Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CurrentStatus = a.ID
	c.CurrentStatus = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CurrentStatusTasks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CurrentStatus == b.CurrentStatus {
			bFound = true
		}
		if v.CurrentStatus == c.CurrentStatus {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TaskStatusSlice{&a}
	if err = a.L.LoadCurrentStatusTasks(ctx, tx, false, (*[]*TaskStatus)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CurrentStatusTasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CurrentStatusTasks = nil
	if err = a.L.LoadCurrentStatusTasks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CurrentStatusTasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTaskStatusToManyAddOpCurrentStatusTasks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TaskStatus
	var b, c, d, e Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskStatusDBTypes, false, strmangle.SetComplement(taskStatusPrimaryKeyColumns, taskStatusColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Task{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Task{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCurrentStatusTasks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CurrentStatus {
			t.Error("foreign key was wrong value", a.ID, first.CurrentStatus)
		}
		if a.ID != second.CurrentStatus {
			t.Error("foreign key was wrong value", a.ID, second.CurrentStatus)
		}

		if first.R.CurrentStatusTaskStatus != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CurrentStatusTaskStatus != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CurrentStatusTasks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CurrentStatusTasks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CurrentStatusTasks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTaskStatusToOneMissionUsingMission(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TaskStatus
	var foreign Mission

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, taskStatusDBTypes, false, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, missionDBTypes, false, missionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mission struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MissionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Mission().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TaskStatusSlice{&local}
	if err = local.L.LoadMission(ctx, tx, false, (*[]*TaskStatus)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Mission == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Mission = nil
	if err = local.L.LoadMission(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Mission == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTaskStatusToOneSetOpMissionUsingMission(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TaskStatus
	var b, c Mission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskStatusDBTypes, false, strmangle.SetComplement(taskStatusPrimaryKeyColumns, taskStatusColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, missionDBTypes, false, strmangle.SetComplement(missionPrimaryKeyColumns, missionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, missionDBTypes, false, strmangle.SetComplement(missionPrimaryKeyColumns, missionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Mission{&b, &c} {
		err = a.SetMission(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Mission != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TaskStatuses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MissionID != x.ID {
			t.Error("foreign key was wrong value", a.MissionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MissionID))
		reflect.Indirect(reflect.ValueOf(&a.MissionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MissionID != x.ID {
			t.Error("foreign key was wrong value", a.MissionID, x.ID)
		}
	}
}

func testTaskStatusesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTaskStatusesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TaskStatusSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTaskStatusesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TaskStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	taskStatusDBTypes = map[string]string{`ID`: `bigint`, `MissionID`: `int`, `Name`: `varchar`, `StatusOrder`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                 = bytes.MinRead
)

func testTaskStatusesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(taskStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(taskStatusAllColumns) == len(taskStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTaskStatusesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(taskStatusAllColumns) == len(taskStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TaskStatus{}
	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, taskStatusDBTypes, true, taskStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(taskStatusAllColumns, taskStatusPrimaryKeyColumns) {
		fields = taskStatusAllColumns
	} else {
		fields = strmangle.SetComplement(
			taskStatusAllColumns,
			taskStatusPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TaskStatusSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTaskStatusesUpsert(t *testing.T) {
	t.Parallel()

	if len(taskStatusAllColumns) == len(taskStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTaskStatusUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TaskStatus{}
	if err = randomize.Struct(seed, &o, taskStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TaskStatus: %s", err)
	}

	count, err := TaskStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, taskStatusDBTypes, false, taskStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaskStatus struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TaskStatus: %s", err)
	}

	count, err = TaskStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
